{
    "block_name": {
        "blockName": "block_name",
        "brief": "simple comment",
        "notice": "notice to coding detail",
        "formatExample": "c++ code famework",
        "blocklyExample": "sample of block for picture (.png)",
        "cppExample": "sample of code for c++"
    },
    "main_block": {
        "blockName": "main_block",
        "brief": "主函式架構",
        "notice": "每段程式碼都只能加一個喔",
        "formatExample": "int main() {\nreturn 0;\n}",
        "blocklyExample": "./databases/pictures/main_block.png",
        "cppExample": "int main() {\nreturn 0;\n}"
    },
    "define_array": {
        "blockName": "define_array",
        "brief": "定義C++內建陣列",
        "notice": "🧐注意：\n1. 需要宣告陣列型態\n2. 需要宣告陣列大小\n3. 宣告完不能再改變陣列大小",
        "formatExample": "資料型態 陣列名稱[陣列大小]",
        "blocklyExample": "",
        "cppExample": "int array[5];"
    },
    "array_name_block": {
        "blockName": "array_name_block",
        "brief": "方便做C++內建鎮列基礎操作，像是sort, 取maxiuman之類的",
        "notice": "",
        "formatExample": "陣列名稱",
        "blocklyExample": "array",
        "cppExample": ""
    },
    "array_content": {
        "blockName": "array_content",
        "brief": "定義C++內建陣列裡面的內容",
        "notice": "🧐注意：\n1. 不能超過宣告陣列大小2. 要用`{}`並且中間的元素都用`,`分開",
        "formatExample": "{內容1, 內容2, 內容3}",
        "blocklyExample": "",
        "cppExample": "{1, 2, 3, 4, 5}"
    },
    "array_operate[]": {
        "blockName": "array_operate[]",
        "brief": "查詢C++內建陣列",
        "notice": "🧐注意：\n1. 不能超過宣告陣列大小",
        "formatExample": "陣列名稱[索引值]",
        "blocklyExample": "",
        "cppExample": ""
    },
    "label": {
        "blockName": "label",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "add_line": {
        "blockName": "add_line",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "tab": {
        "blockName": "tab",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "comment_block": {
        "blockName": "comment_block",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "cin_block": {
        "blockName": "cin_block",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "string_cin": {
        "blockName": "string_cin",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "cout_block": {
        "blockName": "cout_block",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "string_cout": {
        "blockName": "string_cout",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "boost_ios_sync": {
        "blockName": "boost_ios_sync",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "boost_cin_cout_tie": {
        "blockName": "boost_cin_cout_tie",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "logic_operators": {
        "blockName": "logic_operators",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "or_and_xor": {
        "blockName": "or_and_xor",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "false": {
        "blockName": "false",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "true": {
        "blockName": "true",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "logic_not": {
        "blockName": "logic_not",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "number": {
        "blockName": "number",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "var_calculate": {
        "blockName": "var_calculate",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_calculate": {
        "blockName": "math_calculate",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "if_block": {
        "blockName": "if_block",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "switch_block": {
        "blockName": "switch_block",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "break_block": {
        "blockName": "break_block",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "continue_block": {
        "blockName": "continue_block",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "return_block": {
        "blockName": "return_block",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "while_block": {
        "blockName": "while_block",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "for_block": {
        "blockName": "for_block",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "def_var": {
        "blockName": "def_var",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "var_cal": {
        "blockName": "var_cal",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_function": {
        "blockName": "define_function",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_function_void": {
        "blockName": "define_function_void",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "lambda": {
        "blockName": "lambda",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_struct": {
        "blockName": "define_struct",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "get_struct": {
        "blockName": "get_struct",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_class": {
        "blockName": "define_class",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "get_class": {
        "blockName": "get_class",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_block": {
        "blockName": "define_block",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "typedef_block": {
        "blockName": "typedef_block",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "string_plus": {
        "blockName": "string_plus",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "string_commas": {
        "blockName": "string_commas",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_plus": {
        "blockName": "math_plus",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_multiply": {
        "blockName": "math_multiply",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_percent": {
        "blockName": "math_percent",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_divide": {
        "blockName": "math_divide",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_subtract": {
        "blockName": "math_subtract",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_variable": {
        "blockName": "define_variable",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "var_equal": {
        "blockName": "var_equal",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "get_var": {
        "blockName": "get_var",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_pointer": {
        "blockName": "define_pointer",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "def_ptr": {
        "blockName": "def_ptr",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "ptr_equal": {
        "blockName": "ptr_equal",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "get_ptr": {
        "blockName": "get_ptr",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "ptr_of": {
        "blockName": "ptr_of",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "ptr_to": {
        "blockName": "ptr_to",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_reference": {
        "blockName": "define_reference",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "def_ref": {
        "blockName": "def_ref",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "ref_equal": {
        "blockName": "ref_equal",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "get_ref": {
        "blockName": "get_ref",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "nullptr": {
        "blockName": "nullptr",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_vector": {
        "blockName": "define_vector",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_push_back": {
        "blockName": "vector_push_back",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_emplace_back": {
        "blockName": "vector_emplace_back",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_append_range": {
        "blockName": "vector_append_range",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_insert": {
        "blockName": "vector_insert",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_insert_range": {
        "blockName": "vector_insert_range",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_pop_back": {
        "blockName": "vector_pop_back",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_erase": {
        "blockName": "vector_erase",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_swap": {
        "blockName": "vector_swap",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_operate[]": {
        "blockName": "vector_operate[]",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_front": {
        "blockName": "vector_front",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_back": {
        "blockName": "vector_back",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_clear": {
        "blockName": "vector_clear",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_size": {
        "blockName": "vector_size",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_empty": {
        "blockName": "vector_empty",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_reserve": {
        "blockName": "vector_reserve",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_capacity": {
        "blockName": "vector_capacity",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_max_size": {
        "blockName": "vector_max_size",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_begin": {
        "blockName": "vector_begin",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_end": {
        "blockName": "vector_end",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_rbegin": {
        "blockName": "vector_rbegin",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_rend": {
        "blockName": "vector_rend",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_deque": {
        "blockName": "define_deque",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_push_back": {
        "blockName": "deque_push_back",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_emplace_back": {
        "blockName": "deque_emplace_back",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_append_range": {
        "blockName": "deque_append_range",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_push_front": {
        "blockName": "deque_push_front",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_emplace_front": {
        "blockName": "deque_emplace_front",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_prepend_range": {
        "blockName": "deque_prepend_range",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_insert": {
        "blockName": "deque_insert",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_insert_range": {
        "blockName": "deque_insert_range",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_pop_back": {
        "blockName": "deque_pop_back",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_pop_front": {
        "blockName": "deque_pop_front",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_erase": {
        "blockName": "deque_erase",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_swap": {
        "blockName": "deque_swap",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_assign": {
        "blockName": "deque_assign",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_operate[]": {
        "blockName": "deque_operate[]",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_front": {
        "blockName": "deque_front",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_back": {
        "blockName": "deque_back",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_clear": {
        "blockName": "deque_clear",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_size": {
        "blockName": "deque_size",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_empty": {
        "blockName": "deque_empty",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_begin": {
        "blockName": "deque_begin",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_end": {
        "blockName": "deque_end",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_rbegin": {
        "blockName": "deque_rbegin",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_rend": {
        "blockName": "deque_rend",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_set": {
        "blockName": "define_set",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_insert": {
        "blockName": "set_insert",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_insert_range": {
        "blockName": "set_insert_range",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_emplace": {
        "blockName": "set_emplace",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_erase": {
        "blockName": "set_erase",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_extract": {
        "blockName": "set_extract",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_merge": {
        "blockName": "set_merge",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_swap": {
        "blockName": "set_swap",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_clear": {
        "blockName": "set_clear",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_size": {
        "blockName": "set_size",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_empty": {
        "blockName": "set_empty",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_max_size": {
        "blockName": "set_max_size",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_count": {
        "blockName": "set_count",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_find": {
        "blockName": "set_find",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_contains": {
        "blockName": "set_contains",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_equal_range": {
        "blockName": "set_equal_range",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_lower_bound": {
        "blockName": "set_lower_bound",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_upper_bound": {
        "blockName": "set_upper_bound",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_begin": {
        "blockName": "set_begin",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_end": {
        "blockName": "set_end",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_rbegin": {
        "blockName": "set_rbegin",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_rend": {
        "blockName": "set_rend",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_map": {
        "blockName": "define_map",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_insert": {
        "blockName": "map_insert",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_insert_range": {
        "blockName": "map_insert_range",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_emplace": {
        "blockName": "map_emplace",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_erase": {
        "blockName": "map_erase",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_extract": {
        "blockName": "map_extract",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_merge": {
        "blockName": "map_merge",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_swap": {
        "blockName": "map_swap",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_clear": {
        "blockName": "map_clear",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_size": {
        "blockName": "map_size",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_empty": {
        "blockName": "map_empty",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_max_size": {
        "blockName": "map_max_size",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_count": {
        "blockName": "map_count",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_find": {
        "blockName": "map_find",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_contains": {
        "blockName": "map_contains",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_equal_range": {
        "blockName": "map_equal_range",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_lower_bound": {
        "blockName": "map_lower_bound",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_upper_bound": {
        "blockName": "map_upper_bound",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_begin": {
        "blockName": "map_begin",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_end": {
        "blockName": "map_end",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_rbegin": {
        "blockName": "map_rbegin",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_rend": {
        "blockName": "map_rend",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "make_map": {
        "blockName": "make_map",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_stack": {
        "blockName": "define_stack",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "stack_push": {
        "blockName": "stack_push",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "stack_push_range": {
        "blockName": "stack_push_range",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "stack_emplace": {
        "blockName": "stack_emplace",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "stack_pop": {
        "blockName": "stack_pop",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "stack_swap": {
        "blockName": "stack_swap",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "stack_top": {
        "blockName": "stack_top",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "stack_size": {
        "blockName": "stack_size",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "stack_empty": {
        "blockName": "stack_empty",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_queue": {
        "blockName": "define_queue",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "queue_push": {
        "blockName": "queue_push",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "queue_push_range": {
        "blockName": "queue_push_range",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "queue_emplace": {
        "blockName": "queue_emplace",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "queue_pop": {
        "blockName": "queue_pop",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "queue_swap": {
        "blockName": "queue_swap",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "queue_front": {
        "blockName": "queue_front",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "queue_size": {
        "blockName": "queue_size",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "queue_empty": {
        "blockName": "queue_empty",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_priority_queue": {
        "blockName": "define_priority_queue",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "priority_queue_push": {
        "blockName": "priority_queue_push",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "priority_queue_push_range": {
        "blockName": "priority_queue_push_range",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "priority_queue_emplace": {
        "blockName": "priority_queue_emplace",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "priority_queue_pop": {
        "blockName": "priority_queue_pop",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "priority_queue_swap": {
        "blockName": "priority_queue_swap",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "priority_queue_front": {
        "blockName": "priority_queue_front",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "priority_queue_size": {
        "blockName": "priority_queue_size",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "priority_queue_empty": {
        "blockName": "priority_queue_empty",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_pair": {
        "blockName": "define_pair",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "pair_first": {
        "blockName": "pair_first",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "pair_second": {
        "blockName": "pair_second",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "make_pair": {
        "blockName": "make_pair",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_bitset": {
        "blockName": "define_bitset",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "bitset[i]": {
        "blockName": "bitset[i]",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "bitset_size": {
        "blockName": "bitset_size",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "bitset_count": {
        "blockName": "bitset_count",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "bitset_set": {
        "blockName": "bitset_set",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "bitset_reset": {
        "blockName": "bitset_reset",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "bitset_all": {
        "blockName": "bitset_all",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "bitset_any": {
        "blockName": "bitset_any",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "bitset_none": {
        "blockName": "bitset_none",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "sort": {
        "blockName": "sort",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "max": {
        "blockName": "max",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "min": {
        "blockName": "min",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "find": {
        "blockName": "find",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_ceil": {
        "blockName": "math_ceil",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_floor": {
        "blockName": "math_floor",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_sqrt": {
        "blockName": "math_sqrt",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_abs": {
        "blockName": "math_abs",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_random": {
        "blockName": "math_random",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_sine": {
        "blockName": "math_sine",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_cosine": {
        "blockName": "math_cosine",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_tangent": {
        "blockName": "math_tangent",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "get_current_timestamp": {
        "blockName": "get_current_timestamp",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "get_current_local_time": {
        "blockName": "get_current_local_time",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "get_current_utc_time": {
        "blockName": "get_current_utc_time",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "calculate_time_difference": {
        "blockName": "calculate_time_difference",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "convert_to_local_time": {
        "blockName": "convert_to_local_time",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "convert_to_utc_time": {
        "blockName": "convert_to_utc_time",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "format_time_string": {
        "blockName": "format_time_string",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_time_structure": {
        "blockName": "set_time_structure",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "read_time_structure_member": {
        "blockName": "read_time_structure_member",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "setbase": {
        "blockName": "setbase",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "setprecision": {
        "blockName": "setprecision",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "setw": {
        "blockName": "setw",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "setfill": {
        "blockName": "setfill",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "char_bit": {
        "blockName": "char_bit",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "schar_min": {
        "blockName": "schar_min",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "schar_max": {
        "blockName": "schar_max",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "uchar_max": {
        "blockName": "uchar_max",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "char_min": {
        "blockName": "char_min",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "char_max": {
        "blockName": "char_max",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "int_min": {
        "blockName": "int_min",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "int_max": {
        "blockName": "int_max",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "uint_max": {
        "blockName": "uint_max",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "llong_min": {
        "blockName": "llong_min",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "llong_max": {
        "blockName": "llong_max",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "ullong_max": {
        "blockName": "ullong_max",
        "brief": "",
        "notice": "",
        "formatExample": "",
        "blocklyExample": "",
        "cppExample": ""
    }
}
