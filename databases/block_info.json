{
    "block_name": {
        "blockName": "block_name",
        "brief": "simple comment",
        "notice": "⚠️注意：notice to coding detail",
        "formatChinese": "c++ code famework for Chinese",
        "formatEnglish": "c++ code famework for English",
        "blocklyExample": "sample of block for picture (.png)",
        "cppExample": "sample of code for c++"
    },
    "main_block": {
        "blockName": "main_block",
        "brief": "主函式架構",
        "notice": "⚠️注意：每段程式碼都只能加一個喔",
        "formatChinese": "同下👇",
        "formatEnglish": "1 | int main() {\n2 |     return 0;\n3 | }",
        "blocklyExample": "./databases/pictures/main_block.png",
        "cppExample": "1 | int main() {\n2 |     return 0;\n3 | }"
    },
    "define_array": {
        "blockName": "define_array",
        "brief": "定義C++內建陣列",
        "notice": "⚠️注意：\n1. 需要宣告陣列型態\n2. 需要宣告陣列大小\n3. 宣告完不能再改變陣列大小\n4. 陣列內容不一定要加",
        "formatChinese": "資料型態 陣列名稱[陣列大小] = {陣列內容};",
        "formatEnglish": "type name[size] = {content}",
        "blocklyExample": "",
        "cppExample": "int array[5];"
    },
    "array_name_block": {
        "blockName": "array_name_block",
        "brief": "方便做C++內建鎮列基礎操作，像是sort, 取maxiuman之類的",
        "notice": "⚠️注意：no",
        "formatChinese": "陣列名稱",
        "formatEnglish": "name",
        "blocklyExample": "array",
        "cppExample": ""
    },
    "array_content": {
        "blockName": "array_content",
        "brief": "定義C++內建陣列裡面的內容",
        "notice": "⚠️注意：\n1. 不能超過宣告陣列大小2. 要用`{}`並且中間的元素都用`,`分開",
        "formatChinese": "{內容1, 內容2, 內容3}",
        "formatEnglish": "{content1,content2,content3}",
        "blocklyExample": "",
        "cppExample": "{1, 2, 3, 4, 5}"
    },
    "array_operate[]": {
        "blockName": "array_operate[]",
        "brief": "查詢C++內建陣列",
        "notice": "⚠️注意：\n1. 不能超過宣告陣列大小\n2. 如果索引值(index) = 4 會查到第5個元素喔(陣列元素從0開始)",
        "formatChinese": "陣列名稱[索引值]",
        "formatEnglish": "name[index]",
        "blocklyExample": "",
        "cppExample": "a[5]"
    },
    "label": {
        "blockName": "label",
        "brief": "字串(string)",
        "notice": "⚠️注意：記得要用\"\"",
        "formatChinese": "\"字串 (什麼文字、符號都可以)\"",
        "formatEnglish": "\"string(any word, mark or emoji are ok)\"",
        "blocklyExample": "",
        "cppExample": "\"Hello, World!\""
    },
    "add_line": {
        "blockName": "add_line",
        "brief": "換行",
        "notice": "⚠️注意：no",
        "formatChinese": "換行",
        "formatEnglish": "newline",
        "blocklyExample": "",
        "cppExample":  "\\n"
    },
    "tab": {
        "blockName": "tab",
        "brief": "空4格，跟電腦的Tab鍵一樣",
        "notice": "⚠️注意：no",
        "formatChinese": "同下👇",
        "formatEnglish": "    ",
        "blocklyExample": "",
        "cppExample": "    "
    },
    "comment_block": {
        "blockName": "comment_block",
        "brief": "註解",
        "notice": "⚠️注意：no",
        "formatChinese": "註解",
        "formatEnglish": "comnent",
        "blocklyExample": "",
        "cppExample": "//打註解內容"
    },
    "cin_block": {
        "blockName": "cin_block",
        "brief": "其中一種輸入方式(新手推薦)",
        "notice": "⚠️注意：\n1. 多筆測資要用下面可以擴充`>>`的方塊2. 換行也可以讀到",
        "formatChinese": "cin >> 變數1 >> 變數2 >> 變數3;",
        "formatEnglish": "cin >> var1 >> var2 >> var3;",
        "blocklyExample": "",
        "cppExample": "cin >> a >> b >> c;"
    },
    "string_cin": {
        "blockName": "string_cin",
        "brief": "擴充cin功能",
        "notice": "⚠️注意：搭配上面`cin`方塊",
        "formatChinese": "變數1 >> 變數2 >> 變數3",
        "formatEnglish": "var1 >> var2 >> var3",
        "blocklyExample": "",
        "cppExample": "a >> b >> c"
    },
    "cout_block": {
        "blockName": "cout_block",
        "brief": "其中一種輸出方式(新手推薦)",
        "notice": "⚠️注意：多筆測資要用下面可以擴充`<<`的方塊",
        "formatChinese": "cout << 變數1 << 變數2 << 變數3;",
        "formatEnglish": "cout << var1 << var2 << var3;",
        "blocklyExample": "",
        "cppExample": "cout << \"Hello World!\""
    },
    "string_cout ": {
        "blockName": "string_cout ",
        "brief": "擴充 cout 功能",
        "notice": "⚠️注意：搭配上面`cout `方塊",
        "formatChinese": "變數1 << 變數2 << 變數3",
        "formatEnglish": "var1 << var2 << var3",
        "blocklyExample": "",
        "cppExample": "a << b << c"
    },
    "boost_ios_sync": {
        "blockName": "boost_ios_sync",
        "brief": "關閉C++(cin, cout)與 C(scanf, printf) 同步 => 加速`cin`跟`cout`速度",
        "notice": "⚠️注意：用這串程式碼就不能有`scanf`跟`printf`喔",
        "formatChinese": "同下👇",
        "formatEnglish": "ios::sync_with_stdio(0);",
        "blocklyExample": "",
        "cppExample": "ios::sync_with_stdio(0);"
    },
    "boost_cin_cout_tie": {
        "blockName": "boost_cin_cout_tie",
        "brief": "解除cim cout 綁定 => 再次加速`cin`跟`cout`",
        "notice": "⚠️注意：no",
        "formatChinese": "同下👇",
        "formatEnglish": "cin.tie(0);cout.tie(0);",
        "blocklyExample": "",
        "cppExample": "cin.tie(0);cout.tie(0);"
    },
    "logic_operators": {
        "blockName": "logic_operators",
        "brief": "邏輯運算子 => 用來判斷條件",
        "notice": "⚠️注意：一般的`=`跟`==`意思一樣但功能不一樣喔，這是專門用來判斷的，",
        "formatChinese": "變數1 不小於(大於等於) 變數2",
        "formatEnglish": "var1 >= var2",
        "blocklyExample": "",
        "cppExample": "int a = 3, b = 4;\nif (a > b) cout << \"a > b\";\nelse cout << \"b > a\";\n//output:b > a"
    },
    "or_and_xor": {
        "blockName": "or_and_xor",
        "brief": "比較運算子 => 這也是專門來段判斷的\n符號意思：\n1. or: `||`\n2. and: `&&`\n3. xor: `^^`",
        "notice": "⚠️注意：**一般的`|`, `&`, `^`跟`||`, `&&`, `^^`功能跟意思都不一樣喔**\n`|`, `&`, `^`是位元運算子(後面會講)，而||`, `&&`, `^^`是專門邏輯判斷的",
        "formatChinese": "變數1 || 變數2",
        "formatEnglish": "var1 || var2",
        "blocklyExample": "",
        "cppExample": "int a = 3, b = 4, c = 3;\nif (a == b or a == c) cout << \"True\";\nelse cout << \"False\";\n//output : True"
    },
    "false": {
        "blockName": "false",
        "brief": "0 也可以代表 false",
        "notice": "⚠️注意：no",
        "formatChinese": "如下👇",
        "formatEnglish": "false",
        "blocklyExample": "",
        "cppExample": "bool c = 0;\n if (c == false) cout << \"False\";\nelse cout << \"True\";\n//output : False"
    },
    "true": {
        "blockName": "true",
        "brief": "1 也可以代表 true",
        "notice": "⚠️注意：no",
        "formatChinese": "如下👇",
        "formatEnglish": "true",
        "blocklyExample": "",
        "cppExample": "bool c = 1;\n if (c == false) cout << \"False\";\nelse cout << \"True\";\n//output : True"
    },
    "logic_not": {
        "blockName": "logic_not",
        "brief": "本質上是`flase`，只是他是用來做判斷的，可以讓判斷是寫的更簡潔，符號`!`",
        "notice": "⚠️注意：不一定要用在判斷式，變數定義也可以",
        "formatChinese": "!變數1",
        "formatEnglish": "!var1",
        "blocklyExample": "",
        "cppExample": "//1\n bool c = 1;\nif (!c) cout << \"False\";\nelse cout << \"True\";\n//output : True\n\n//2\nbool c = 0;\nbool d = !c; //d = 1"
    },
    "number": {
        "blockName": "number",
        "brief": "數字",
        "notice": "⚠️注意：要記得C++數字有限制大寫喔",
        "formatChinese": "0",
        "formatEnglish": "0",
        "blocklyExample": "",
        "cppExample": "int a = 5;"
    },
    "var_calculate": {
        "blockName": "var_calculate",
        "brief": "賦值運算子 => 用來跟自己做運算的(是不是不太懂😅，繼續看下去)",
        "notice": "⚠️注意：如果後面有一大串運算，記得要括號喔!!!",
        "formatChinese": "變數1 += 變數2 //變數1 = 變數1 + 變數2",
        "formatEnglish": "var1 += var2 // var1 = var1 + var2",
        "blocklyExample": "",
        "cppExample": "int a = 5;\n a += 5; //a = 10"
    },
    "math_calculate": {
        "blockName": "math_calculate",
        "brief": "就是一般的加減乘除",
        "notice": "⚠️注意：1. 除法是整數除法\n2. `%` 是取餘數的意思",
        "formatChinese": "變數1 + 變數2",
        "formatEnglish": "var1 + var2",
        "blocklyExample": "",
        "cppExample": "int a = 2, b = 3;\ncout << a + b;"
    },
    "if_block": {
        "blockName": "if_block",
        "brief": "用來做條件判斷，判斷true 或是 false",
        "notice": "⚠️注意：記得條件的地方`()`",
        "formatChinese": "if (條件1){\n...\n}",
        "formatEnglish": "if (condition){\n...\n}",
        "blocklyExample": "",
        "cppExample": "int a = 1, b = 2;\nif (a == b) cout << \"a = b\";\nelse cout << \"a != b\";"
    },
    "switch_block": {
        "blockName": "switch_block",
        "brief": "多個相似的條件且只適用於`=`的if可以用switch替換",
        "notice": "⚠️注意：1. 盡量都用`if`\n2. 他是很多個`if`組成的，所以如果要把它變成`else if`的話記得要加`break`",
        "formatChinese": "switch(變數名稱或運算式)\n{\ncase:\n ...\ncase: ...\ndefault ...\n}",
        "formatEnglish": "switch(var or Operational expression)\n{\ncase:\n ...\ncase: ...\ndefault ...\n}",
        "blocklyExample": "",
        "cppExample": "//1\nv = 10;\nswitch (v){\n    case 1:\n        cout << 1;\n        break;\n    case 2:\n        cout << 2;\n        break;\n    default:\n        cout << \"not 1 and 2\";\n        break;\n//output = not 1 and 2\n\n//2\n//a is a array, size is 3\nswitch (int len = a.size(); len){\n    case 1:\n        cout << \"len = 1\";\n        break;\n    case 2:\n        cout << \"len = 2\";\n        break;\n    default:\n        cout << \"len not 1 and 2\";\n        break;\n//output = len not 1 and 2"
    },
    "break_block": {
        "blockName": "break_block",
        "brief": "用來終止條件、迴圈",
        "notice": "⚠️注意：一定要把`break`包在條件、迴圈裡面喔",
        "formatChinese": "if (條件){\n    ....\n    break;\n}",
        "formatEnglish": "if (condition){\n    ....\n    break;\n}",
        "blocklyExample": "",
        "cppExample": "for (int i = 0; i < 5; i++) {\n    if (i) break;\n    cout << i << \" \";\ncout << \"6\";\n}\n//output = 0 6"
    },
    "continue_block": {
        "blockName": "continue_block",
        "brief": "用來跳過條件、迴圈"
        "notice": "⚠️注意：一定要把`continue`包在條件、迴圈裡面喔",
        "formatChinese": "if (條件){\n    ....\n   continue;\n}",
        "formatEnglish": "if (condition){\n    ....\n    continue;\n}",
        "blocklyExample": "",
        "cppExample": "for (int i = 0; i < 5; i++) {\n    if (i) continue;\n    cout << i << \" \";\ncout << \"6\";\n}\n//output = 0 2 3 4 6"
    },
    "return_block": {
        "blockName": "return_block",
        "brief": "用來終止程式碼",
        "notice": "⚠️注意：只要寫到，就是把程式碼直接終止，除了在函式以內，在函式是回傳值",
        "formatChinese": "if (條件){\n    ....\n   return 0;\n}",
        "formatEnglish": "if (condition){\n    ....\n   return 0;\n}",
        "blocklyExample": "for (int i = 0; i < 5; i++) {\n    if (i) continue;\n    cout << i << \" \";\ncout << \"6\";\n}\n//output = 0",
        "cppExample": ""
    },
    "while_block": {
        "blockName": "while_block",
        "brief": "執行到不符合條件，才會終止",
        "notice": "⚠️注意：是不符合條件喔",
        "formatChinese": "while (條件1){\n    ...\n}",
        "formatEnglish": "while (condition){\n    ...\n}",
        "blocklyExample": "",
        "cppExample": "int a = 1, b = 3;\nwhile (a != b)\n    a++;\ncout << \"a = \" << a << \", b = \" << b; // a = 3, b = 3"
    },
    "for_block": {
        "blockName": "for_block",
        "brief": "執行到符合終止條件",
        "notice": "⚠️注意：包含變數、終止條件以及變數運算(至少要有終止條件)",
        "formatChinese": "如下👇",
        "formatEnglish": "for (int i = 0; i < n; i++){\n    ...\n}",
        "blocklyExample": "",
        "cppExample": "for (int i = 0; i < 5; i++) cout << i;\n//output = 01234"
    },
    "def_var": {
        "blockName": "def_var",
        "brief": "變數定義",
        "notice": "⚠️注意：包含變數型態、變數名子以及變數值(可省略)",
        "formatChinese": "資料型態 變數名子 = 變數值",
        "formatEnglish": "type name = value",
        "blocklyExample": "",
        "cppExample": "//1\n int a = 1;\n\n //2\n int b;"
    },
    "var_cal": {
        "blockName": "var_cal",
        "brief": "改變先定義好變數的變數值",
        "notice": "⚠️注意：一定要先定義好的變數喔，不然會抱錯",
        "formatChinese": "變數1 = 值",
        "formatEnglish": "var 1 = value",
        "blocklyExample": "",
        "cppExample": "int a = 1;\n a = 4;\ncout << a;\n//a = 4"
    },
    "define_function": {
        "blockName": "define_function",
        "brief": "可以做為遞迴，或是減少主程式程式碼行數",
        "notice": "⚠️注意：1. 記得一定要回傳值(如果沒有回傳值用`void`)\n2. 使用時機：\n    (1)遞迴\n    (2)減少主程式程式碼行數\n    (3)有多個回傳值\n    (4)可以加速程式碼執行效率",
        "formatChinese": "資料型態 函式名稱(引用變數值){\n    ...\n}",
        "formatEnglish": "type name(var){\n    ...\n}",
        "blocklyExample": "",
        "cppExample": "int add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int a = 1, b = 2;\n    cout << add(a, b);\n    // output = 3\n}"
    },
    "define_function_void": {
        "blockName": "define_function_void",
        "brief": "可以做為遞迴，或是減少主程式程式碼行數",
        "notice": "⚠️注意：1. 記得不能有回傳值，只能有`return`當作終止函式(如果有回傳值不要用`void`)\n2. 使用時機：\n    (1)遞迴\n    (2)減少主程式程式碼行數\n    (3)有多個回傳值\n    (4)可以加速程式碼執行效率"",
        "formatChinese": "void 函式名稱(引用變數值){\n    ...\n}",
        "formatEnglish": "void name(var){\n    ...\n}",
        "blocklyExample": "",
        "cppExample": "void add(int a, int b, int &num) {\n    num = a + b;\n    return ;\n}\n\nint main() {\n    int a = 1, b = 2, num = 0;\n    add(a, b, num);\n    cout << num;\n    // output = 3\n}"
    },
    "lambda": {
        "blockName": "lambda",
        "brief": "函式的省略版，可以把他定義在main裡面",
        "notice": "⚠️注意：\n1.跟函式一樣的寫法\n2. `[]`裡面如果要直接使用變數記得要先定義3. `[]`裡面如果是`&`就代表後面變數都是reference，`=`代表一般的引用變數，為預設值",
        "formatChinese": "如下👇",
        "formatEnglish": "auto l = [](int a, int b){return a+b;}",
        "blocklyExample": "",
        "cppExample": "int a = 1, b = 2;\n    auto l = [](int a, int b) { return a + b; };\n    cout << l(a, b);"
    },
    "define_struct": {
        "blockName": "define_struct",
        "brief": "把不同的資料型態整理再一起，方便變數傳遞",
        "notice": "⚠️注意：\n1. 分成先宣告跟後宣告\n2. 裡面也可以放function之類\n3.記得結尾要加分號",
        "formatChinese": "struct{\n 資料型態 變數1\n ...\n};",
        "formatEnglish": "struct{\n type var1\n ...\n};",
        "blocklyExample": "",
        "cppExample": "//1 未宣告\nstruct student {\n    int id;\n    string name;\n};\n\n//2 已宣告\nstruct student {\n    int id;\n    string name;\n} st1, st2; // 宣告 st1, st2 type 為 student"
    },
    "get_struct": {
        "blockName": "get_struct",
        "brief": "把她當資料型態定義變數會陣列",
        "notice": "⚠️注意：可以是變數也可以是陣列喔",
        "formatChinese": "struct的名子 變數名",
        "formatEnglish": "struct_name var_name",
        "blocklyExample": "",
        "cppExample": "struct student {\n    int id;\n    string name;\n};\n\n\nint main() {\n    student st1, st2;\n    st1.id = 1, st1.name = \"hamichi\", st2 = {2, \"ericbob\"};\n    cout << \"st1.id = \" << st1.id << \", st1.name = \" << st1.name << \", st2.id = \" << st2.id << \", st2.name = \" << st2.name;\n}"
    },
    "define_class": {
        "blockName": "define_class",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "get_class": {
        "blockName": "get_class",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_block": {
        "blockName": "define_block",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "typedef_block": {
        "blockName": "typedef_block",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "string_plus": {
        "blockName": "string_plus",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "string_commas": {
        "blockName": "string_commas",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_plus": {
        "blockName": "math_plus",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_multiply": {
        "blockName": "math_multiply",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_percent": {
        "blockName": "math_percent",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_divide": {
        "blockName": "math_divide",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_subtract": {
        "blockName": "math_subtract",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_variable": {
        "blockName": "define_variable",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "var_equal": {
        "blockName": "var_equal",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "get_var": {
        "blockName": "get_var",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_pointer": {
        "blockName": "define_pointer",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "def_ptr": {
        "blockName": "def_ptr",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "ptr_equal": {
        "blockName": "ptr_equal",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "get_ptr": {
        "blockName": "get_ptr",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "ptr_of": {
        "blockName": "ptr_of",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "ptr_to": {
        "blockName": "ptr_to",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_reference": {
        "blockName": "define_reference",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "def_ref": {
        "blockName": "def_ref",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "ref_equal": {
        "blockName": "ref_equal",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "get_ref": {
        "blockName": "get_ref",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "nullptr": {
        "blockName": "nullptr",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_vector": {
        "blockName": "define_vector",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_push_back": {
        "blockName": "vector_push_back",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_emplace_back": {
        "blockName": "vector_emplace_back",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_append_range": {
        "blockName": "vector_append_range",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_insert": {
        "blockName": "vector_insert",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_insert_range": {
        "blockName": "vector_insert_range",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_pop_back": {
        "blockName": "vector_pop_back",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_erase": {
        "blockName": "vector_erase",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_swap": {
        "blockName": "vector_swap",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_operate[]": {
        "blockName": "vector_operate[]",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_front": {
        "blockName": "vector_front",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_back": {
        "blockName": "vector_back",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_clear": {
        "blockName": "vector_clear",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_size": {
        "blockName": "vector_size",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_empty": {
        "blockName": "vector_empty",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_reserve": {
        "blockName": "vector_reserve",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_capacity": {
        "blockName": "vector_capacity",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_max_size": {
        "blockName": "vector_max_size",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_begin": {
        "blockName": "vector_begin",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_end": {
        "blockName": "vector_end",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_rbegin": {
        "blockName": "vector_rbegin",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "vector_rend": {
        "blockName": "vector_rend",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_deque": {
        "blockName": "define_deque",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_push_back": {
        "blockName": "deque_push_back",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_emplace_back": {
        "blockName": "deque_emplace_back",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_append_range": {
        "blockName": "deque_append_range",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_push_front": {
        "blockName": "deque_push_front",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_emplace_front": {
        "blockName": "deque_emplace_front",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_prepend_range": {
        "blockName": "deque_prepend_range",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_insert": {
        "blockName": "deque_insert",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_insert_range": {
        "blockName": "deque_insert_range",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_pop_back": {
        "blockName": "deque_pop_back",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_pop_front": {
        "blockName": "deque_pop_front",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_erase": {
        "blockName": "deque_erase",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_swap": {
        "blockName": "deque_swap",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_assign": {
        "blockName": "deque_assign",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_operate[]": {
        "blockName": "deque_operate[]",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_front": {
        "blockName": "deque_front",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_back": {
        "blockName": "deque_back",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_clear": {
        "blockName": "deque_clear",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_size": {
        "blockName": "deque_size",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_empty": {
        "blockName": "deque_empty",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_begin": {
        "blockName": "deque_begin",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_end": {
        "blockName": "deque_end",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_rbegin": {
        "blockName": "deque_rbegin",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "deque_rend": {
        "blockName": "deque_rend",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_set": {
        "blockName": "define_set",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_insert": {
        "blockName": "set_insert",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_insert_range": {
        "blockName": "set_insert_range",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_emplace": {
        "blockName": "set_emplace",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_erase": {
        "blockName": "set_erase",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_extract": {
        "blockName": "set_extract",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_merge": {
        "blockName": "set_merge",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_swap": {
        "blockName": "set_swap",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_clear": {
        "blockName": "set_clear",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_size": {
        "blockName": "set_size",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_empty": {
        "blockName": "set_empty",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_max_size": {
        "blockName": "set_max_size",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_count": {
        "blockName": "set_count",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_find": {
        "blockName": "set_find",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_contains": {
        "blockName": "set_contains",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_equal_range": {
        "blockName": "set_equal_range",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_lower_bound": {
        "blockName": "set_lower_bound",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_upper_bound": {
        "blockName": "set_upper_bound",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_begin": {
        "blockName": "set_begin",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_end": {
        "blockName": "set_end",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_rbegin": {
        "blockName": "set_rbegin",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_rend": {
        "blockName": "set_rend",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_map": {
        "blockName": "define_map",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_insert": {
        "blockName": "map_insert",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_insert_range": {
        "blockName": "map_insert_range",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_emplace": {
        "blockName": "map_emplace",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_erase": {
        "blockName": "map_erase",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_extract": {
        "blockName": "map_extract",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_merge": {
        "blockName": "map_merge",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_swap": {
        "blockName": "map_swap",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_clear": {
        "blockName": "map_clear",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_size": {
        "blockName": "map_size",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_empty": {
        "blockName": "map_empty",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_max_size": {
        "blockName": "map_max_size",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_count": {
        "blockName": "map_count",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_find": {
        "blockName": "map_find",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_contains": {
        "blockName": "map_contains",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_equal_range": {
        "blockName": "map_equal_range",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_lower_bound": {
        "blockName": "map_lower_bound",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_upper_bound": {
        "blockName": "map_upper_bound",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_begin": {
        "blockName": "map_begin",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_end": {
        "blockName": "map_end",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_rbegin": {
        "blockName": "map_rbegin",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "map_rend": {
        "blockName": "map_rend",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "make_map": {
        "blockName": "make_map",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_stack": {
        "blockName": "define_stack",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "stack_push": {
        "blockName": "stack_push",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "stack_push_range": {
        "blockName": "stack_push_range",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "stack_emplace": {
        "blockName": "stack_emplace",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "stack_pop": {
        "blockName": "stack_pop",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "stack_swap": {
        "blockName": "stack_swap",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "stack_top": {
        "blockName": "stack_top",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "stack_size": {
        "blockName": "stack_size",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "stack_empty": {
        "blockName": "stack_empty",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_queue": {
        "blockName": "define_queue",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "queue_push": {
        "blockName": "queue_push",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "queue_push_range": {
        "blockName": "queue_push_range",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "queue_emplace": {
        "blockName": "queue_emplace",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "queue_pop": {
        "blockName": "queue_pop",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "queue_swap": {
        "blockName": "queue_swap",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "queue_front": {
        "blockName": "queue_front",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "queue_size": {
        "blockName": "queue_size",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "queue_empty": {
        "blockName": "queue_empty",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_priority_queue": {
        "blockName": "define_priority_queue",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "priority_queue_push": {
        "blockName": "priority_queue_push",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "priority_queue_push_range": {
        "blockName": "priority_queue_push_range",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "priority_queue_emplace": {
        "blockName": "priority_queue_emplace",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "priority_queue_pop": {
        "blockName": "priority_queue_pop",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "priority_queue_swap": {
        "blockName": "priority_queue_swap",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "priority_queue_front": {
        "blockName": "priority_queue_front",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "priority_queue_size": {
        "blockName": "priority_queue_size",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "priority_queue_empty": {
        "blockName": "priority_queue_empty",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_pair": {
        "blockName": "define_pair",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "pair_first": {
        "blockName": "pair_first",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "pair_second": {
        "blockName": "pair_second",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "make_pair": {
        "blockName": "make_pair",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "define_bitset": {
        "blockName": "define_bitset",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "bitset[i]": {
        "blockName": "bitset[i]",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "bitset_size": {
        "blockName": "bitset_size",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "bitset_count": {
        "blockName": "bitset_count",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "bitset_set": {
        "blockName": "bitset_set",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "bitset_reset": {
        "blockName": "bitset_reset",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "bitset_all": {
        "blockName": "bitset_all",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "bitset_any": {
        "blockName": "bitset_any",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "bitset_none": {
        "blockName": "bitset_none",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "sort": {
        "blockName": "sort",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "max": {
        "blockName": "max",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "min": {
        "blockName": "min",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "find": {
        "blockName": "find",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_ceil": {
        "blockName": "math_ceil",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_floor": {
        "blockName": "math_floor",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_sqrt": {
        "blockName": "math_sqrt",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_abs": {
        "blockName": "math_abs",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_random": {
        "blockName": "math_random",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_sine": {
        "blockName": "math_sine",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_cosine": {
        "blockName": "math_cosine",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "math_tangent": {
        "blockName": "math_tangent",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "get_current_timestamp": {
        "blockName": "get_current_timestamp",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "get_current_local_time": {
        "blockName": "get_current_local_time",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "get_current_utc_time": {
        "blockName": "get_current_utc_time",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "calculate_time_difference": {
        "blockName": "calculate_time_difference",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "convert_to_local_time": {
        "blockName": "convert_to_local_time",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "convert_to_utc_time": {
        "blockName": "convert_to_utc_time",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "format_time_string": {
        "blockName": "format_time_string",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "set_time_structure": {
        "blockName": "set_time_structure",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "read_time_structure_member": {
        "blockName": "read_time_structure_member",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "setbase": {
        "blockName": "setbase",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "setprecision": {
        "blockName": "setprecision",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "setw": {
        "blockName": "setw",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "setfill": {
        "blockName": "setfill",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "char_bit": {
        "blockName": "char_bit",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "schar_min": {
        "blockName": "schar_min",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "schar_max": {
        "blockName": "schar_max",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "uchar_max": {
        "blockName": "uchar_max",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "char_min": {
        "blockName": "char_min",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "char_max": {
        "blockName": "char_max",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "int_min": {
        "blockName": "int_min",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "int_max": {
        "blockName": "int_max",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "uint_max": {
        "blockName": "uint_max",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "llong_min": {
        "blockName": "llong_min",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "llong_max": {
        "blockName": "llong_max",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    },
    "ullong_max": {
        "blockName": "ullong_max",
        "brief": "",
        "notice": "⚠️注意：",
        "formatChinese": "",
        "formatEnglish": "",
        "blocklyExample": "",
        "cppExample": ""
    }
}
